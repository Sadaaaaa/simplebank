package com.kitchentech.accounts.controller;

import com.kitchentech.accounts.service.OAuth2TokenService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/token-test")
@RequiredArgsConstructor
public class TokenTestController {

    private final OAuth2TokenService oAuth2TokenService;

    @GetMapping("/get-token")
    public ResponseEntity<Map<String, Object>> getToken() {
        log.info("üîê [TokenTestController] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞");
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            String token = oAuth2TokenService.getAccessToken();
            
            if (token != null) {
                log.info("‚úÖ [TokenTestController] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                response.put("success", true);
                response.put("token", token.substring(0, Math.min(20, token.length())) + "...");
                response.put("message", "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                return ResponseEntity.ok(response);
            } else {
                log.error("‚ùå [TokenTestController] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω");
                response.put("success", false);
                response.put("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω");
                return ResponseEntity.badRequest().body(response);
            }
            
        } catch (Exception e) {
            log.error("‚ùå [TokenTestController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage(), e);
            response.put("success", false);
            response.put("message", "–û—à–∏–±–∫–∞: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    @GetMapping("/validate-token")
    public ResponseEntity<Map<String, Object>> validateToken() {
        log.info("üîç [TokenTestController] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞");
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            String token = oAuth2TokenService.getAccessToken();
            boolean isValid = oAuth2TokenService.validateToken(token);
            
            response.put("success", isValid);
            response.put("token_valid", isValid);
            response.put("message", isValid ? "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω" : "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω");
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå [TokenTestController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage(), e);
            response.put("success", false);
            response.put("message", "–û—à–∏–±–∫–∞: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }
} 