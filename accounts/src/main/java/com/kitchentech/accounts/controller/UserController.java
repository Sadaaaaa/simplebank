package com.kitchentech.accounts.controller;

import com.kitchentech.accounts.dto.UserRegistrationDto;
import com.kitchentech.accounts.dto.UserRegistrationResponseDto;
import com.kitchentech.accounts.dto.ChangePasswordRequestDto;
import com.kitchentech.accounts.entity.User;
import com.kitchentech.accounts.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    @PostMapping("/register")
    public ResponseEntity<UserRegistrationResponseDto> registerUser(@RequestBody UserRegistrationDto registrationDto) {
        log.info("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getUsername());
        log.info("üìß Email: {}, –ò–º—è: {}, –§–∞–º–∏–ª–∏—è: {}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {}", registrationDto.getEmail(), registrationDto.getFirstName(), registrationDto.getLastName(), registrationDto.getBirthDate());

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
            if (userRepository.findByUsername(registrationDto.getUsername()).isPresent()) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", registrationDto.getUsername());
                UserRegistrationResponseDto errorResponse = new UserRegistrationResponseDto();
                errorResponse.setUsername(registrationDto.getUsername());
                errorResponse.setEmail(registrationDto.getEmail());
                errorResponse.setFirstName(registrationDto.getFirstName());
                errorResponse.setLastName(registrationDto.getLastName());
                errorResponse.setMessage("Username already exists");
                errorResponse.setSuccess(false);
                return ResponseEntity.badRequest().body(errorResponse);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            if (userRepository.findByEmail(registrationDto.getEmail()).isPresent()) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", registrationDto.getEmail());
                UserRegistrationResponseDto errorResponse = new UserRegistrationResponseDto();
                errorResponse.setUsername(registrationDto.getUsername());
                errorResponse.setEmail(registrationDto.getEmail());
                errorResponse.setFirstName(registrationDto.getFirstName());
                errorResponse.setLastName(registrationDto.getLastName());
                errorResponse.setMessage("Email already exists");
                errorResponse.setSuccess(false);
                return ResponseEntity.badRequest().body(errorResponse);
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = new User();
            user.setUsername(registrationDto.getUsername());
            user.setPassword(passwordEncoder.encode(registrationDto.getPassword()));
            user.setEmail(registrationDto.getEmail());
            user.setFirstName(registrationDto.getFirstName());
            user.setLastName(registrationDto.getLastName());
            user.setBirthDate(registrationDto.getBirthDate());
            user.setRoles("USER");
            user.setEnabled(true);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User savedUser = userRepository.save(user);
            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {} (ID: {})", savedUser.getUsername(), savedUser.getId());

            UserRegistrationResponseDto successResponse = new UserRegistrationResponseDto();
            successResponse.setUsername(savedUser.getUsername());
            successResponse.setEmail(savedUser.getEmail());
            successResponse.setFirstName(savedUser.getFirstName());
            successResponse.setLastName(savedUser.getLastName());
            successResponse.setMessage("User registered successfully");
            successResponse.setSuccess(true);

            return ResponseEntity.ok(successResponse);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getUsername(), e.getMessage(), e);
            UserRegistrationResponseDto errorResponse = new UserRegistrationResponseDto();
            errorResponse.setUsername(registrationDto.getUsername());
            errorResponse.setEmail(registrationDto.getEmail());
            errorResponse.setFirstName(registrationDto.getFirstName());
            errorResponse.setLastName(registrationDto.getLastName());
            errorResponse.setMessage("Internal server error: " + e.getMessage());
            errorResponse.setSuccess(false);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    @GetMapping("/{username}")
    public ResponseEntity<User> getUserByUsername(@PathVariable String username) {
        log.info("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username: {}", username);

        return userRepository.findByUsername(username)
                .map(user -> {
                    log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.ok(user);
                })
                .orElseGet(() -> {
                    log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.notFound().build();
                });
    }

    @PostMapping("/change-password")
    public ResponseEntity<Map<String, String>> changePassword(@RequestBody ChangePasswordRequestDto request) {
        String username = request.getUsername();
        log.info("üîÑ [change-password] Username –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {}", username);
        log.info("üîÑ [change-password] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {}", request.getNewPassword());
        if (request.getNewPassword() == null || request.getNewPassword().trim().isEmpty()) {
            log.warn("‚ùå [change-password] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
            return ResponseEntity.badRequest().body(Map.of("message", "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }
        return userRepository.findByUsername(username)
                .map(user -> {
                    log.info("üîç [change-password] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                    user.setPassword(passwordEncoder.encode(request.getNewPassword()));
                    userRepository.save(user);
                    log.info("‚úÖ [change-password] –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
                    return ResponseEntity.ok(Map.of("message", "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"));
                })
                .orElseGet(() -> {
                    log.warn("‚ùå [change-password] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.status(404).body(Map.of("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
                });
    }
}
