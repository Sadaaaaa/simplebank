package com.kitchentech.accounts.controller;

import com.kitchentech.accounts.dto.UserRegistrationDto;
import com.kitchentech.accounts.dto.UserRegistrationResponseDto;
import com.kitchentech.accounts.dto.ChangePasswordRequestDto;
import com.kitchentech.accounts.dto.UserDetailsDto;
import com.kitchentech.accounts.entity.User;
import com.kitchentech.accounts.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Slf4j
@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    @PostMapping("/register")
    public ResponseEntity<UserRegistrationResponseDto> registerUser(@RequestBody UserRegistrationDto registrationDto) {
        log.info("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getUsername());
        log.info("üìß Email: {}, –ò–º—è: {}, –§–∞–º–∏–ª–∏—è: {}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {}", registrationDto.getEmail(), registrationDto.getFirstName(), registrationDto.getLastName(), registrationDto.getBirthDate());

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
            if (userRepository.findByUsernameAndDeletedAtIsNull(registrationDto.getUsername()).isPresent()) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", registrationDto.getUsername());
                UserRegistrationResponseDto errorResponse = new UserRegistrationResponseDto();
                errorResponse.setUsername(registrationDto.getUsername());
                errorResponse.setEmail(registrationDto.getEmail());
                errorResponse.setFirstName(registrationDto.getFirstName());
                errorResponse.setLastName(registrationDto.getLastName());
                errorResponse.setMessage("Username already exists");
                errorResponse.setSuccess(false);
                return ResponseEntity.badRequest().body(errorResponse);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            if (userRepository.findByEmailAndDeletedAtIsNull(registrationDto.getEmail()).isPresent()) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", registrationDto.getEmail());
                UserRegistrationResponseDto errorResponse = new UserRegistrationResponseDto();
                errorResponse.setUsername(registrationDto.getUsername());
                errorResponse.setEmail(registrationDto.getEmail());
                errorResponse.setFirstName(registrationDto.getFirstName());
                errorResponse.setLastName(registrationDto.getLastName());
                errorResponse.setMessage("Email already exists");
                errorResponse.setSuccess(false);
                return ResponseEntity.badRequest().body(errorResponse);
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = new User();
            user.setUsername(registrationDto.getUsername());
            user.setPassword(passwordEncoder.encode(registrationDto.getPassword()));
            user.setEmail(registrationDto.getEmail());
            user.setFirstName(registrationDto.getFirstName());
            user.setLastName(registrationDto.getLastName());
            user.setBirthDate(registrationDto.getBirthDate());
            user.setRoles("USER");
            user.setEnabled(true);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User savedUser = userRepository.save(user);
            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {} (ID: {})", savedUser.getUsername(), savedUser.getId());

            UserRegistrationResponseDto successResponse = new UserRegistrationResponseDto();
            successResponse.setUsername(savedUser.getUsername());
            successResponse.setEmail(savedUser.getEmail());
            successResponse.setFirstName(savedUser.getFirstName());
            successResponse.setLastName(savedUser.getLastName());
            successResponse.setMessage("User registered successfully");
            successResponse.setSuccess(true);

            return ResponseEntity.ok(successResponse);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getUsername(), e.getMessage(), e);
            UserRegistrationResponseDto errorResponse = new UserRegistrationResponseDto();
            errorResponse.setUsername(registrationDto.getUsername());
            errorResponse.setEmail(registrationDto.getEmail());
            errorResponse.setFirstName(registrationDto.getFirstName());
            errorResponse.setLastName(registrationDto.getLastName());
            errorResponse.setMessage("Internal server error: " + e.getMessage());
            errorResponse.setSuccess(false);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    @GetMapping("/{username}")
    public ResponseEntity<User> getUserByUsername(@PathVariable String username) {
        log.info("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username: {}", username);

        return userRepository.findByUsernameAndDeletedAtIsNull(username)
                .map(user -> {
                    log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.ok(user);
                })
                .orElseGet(() -> {
                    log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.notFound().build();
                });
    }

    @GetMapping
    public List<UserDetailsDto> getAllUsers() {
        return userRepository.findAllByDeletedAtIsNull()
                .stream()
                .map(user -> {
                    UserDetailsDto dto = new UserDetailsDto();
                    dto.setId(user.getId());
                    dto.setUsername(user.getUsername());
//                    dto.setEmail(user.getEmail());
//                    dto.setFirstName(user.getFirstName());
//                    dto.setLastName(user.getLastName());
                    dto.setRoles(user.getRoles() != null ? List.of(user.getRoles().split(",")) : List.of());
                    return dto;
                })
                .collect(Collectors.toList());
    }

    @PostMapping("/change-password")
    public ResponseEntity<Map<String, String>> changePassword(@RequestBody ChangePasswordRequestDto request) {
        String username = request.getUsername();
        log.info("üîÑ [change-password] Username –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {}", username);
        log.info("üîÑ [change-password] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {}", request.getNewPassword());
        if (request.getNewPassword() == null || request.getNewPassword().trim().isEmpty()) {
            log.warn("‚ùå [change-password] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
            return ResponseEntity.badRequest().body(Map.of("message", "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }
        return userRepository.findByUsernameAndDeletedAtIsNull(username)
                .map(user -> {
                    log.info("üîç [change-password] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                    user.setPassword(passwordEncoder.encode(request.getNewPassword()));
                    userRepository.save(user);
                    log.info("‚úÖ [change-password] –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
                    return ResponseEntity.ok(Map.of("message", "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"));
                })
                .orElseGet(() -> {
                    log.warn("‚ùå [change-password] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.status(404).body(Map.of("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
                });
    }

    @PutMapping("/{username}/profile")
    public ResponseEntity<Map<String, String>> updateProfile(@PathVariable String username, 
                                                           @RequestBody UserRegistrationDto profileDto) {
        log.info("üîÑ [update-profile] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
        log.info("üìß [update-profile] –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: firstName={}, lastName={}, email={}, birthDate={}", 
                profileDto.getFirstName(), profileDto.getLastName(), profileDto.getEmail(), profileDto.getBirthDate());

        return userRepository.findByUsernameAndDeletedAtIsNull(username)
                .map(user -> {
                    log.info("üîç [update-profile] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email –¥—Ä—É–≥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    if (!user.getEmail().equals(profileDto.getEmail())) {
                        if (userRepository.findByEmailAndDeletedAtIsNull(profileDto.getEmail()).isPresent()) {
                            log.warn("‚ùå [update-profile] Email {} —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", profileDto.getEmail());
                            return ResponseEntity.badRequest().body(Map.of("message", "Email —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"));
                        }
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    user.setFirstName(profileDto.getFirstName());
                    user.setLastName(profileDto.getLastName());
                    user.setEmail(profileDto.getEmail());
                    user.setBirthDate(profileDto.getBirthDate());
                    
                    userRepository.save(user);
                    log.info("‚úÖ [update-profile] –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
                    return ResponseEntity.ok(Map.of("message", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"));
                })
                .orElseGet(() -> {
                    log.warn("‚ùå [update-profile] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.status(404).body(Map.of("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
                });
    }

    @DeleteMapping("/{username}")
    public ResponseEntity<Map<String, String>> deleteUser(@PathVariable String username, 
                                                         @RequestParam(required = false) String deletedBy) {
        log.info("üîÑ [delete-user] Soft delete –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}", username, deletedBy);

        return userRepository.findByUsernameAndDeletedAtIsNull(username)
                .map(user -> {
                    log.info("üîç [delete-user] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                    
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
                    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–æ–≤, –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç.–¥.
                    
                    // Soft delete - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
                    user.setEnabled(false);
                    user.setDeletedAt(LocalDateTime.now());
                    user.setDeletedBy(deletedBy != null ? deletedBy : "system");
                    
                    userRepository.save(user);
                    log.info("‚úÖ [delete-user] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π (soft delete): {}", username);
                    return ResponseEntity.ok(Map.of("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"));
                })
                .orElseGet(() -> {
                    log.warn("‚ùå [delete-user] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.status(404).body(Map.of("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
                });
    }

    @PostMapping("/{username}/restore")
    public ResponseEntity<Map<String, String>> restoreUser(@PathVariable String username) {
        log.info("üîÑ [restore-user] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);

        return userRepository.findByUsernameAndDeletedAtIsNotNull(username)
                .map(user -> {
                    log.info("üîç [restore-user] –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.setEnabled(true);
                    user.setDeletedAt(null);
                    user.setDeletedBy(null);
                    
                    userRepository.save(user);
                    log.info("‚úÖ [restore-user] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {}", username);
                    return ResponseEntity.ok(Map.of("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"));
                })
                .orElseGet(() -> {
                    log.warn("‚ùå [restore-user] –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return ResponseEntity.status(404).body(Map.of("message", "–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
                });
    }
}
