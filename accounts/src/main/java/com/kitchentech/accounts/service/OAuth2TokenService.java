package com.kitchentech.accounts.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.oauth2.client.OAuth2AuthorizeRequest;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class OAuth2TokenService {

    private final OAuth2AuthorizedClientManager authorizedClientManager;

    public String getAccessToken() {
        log.info("üîê [OAuth2TokenService] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ access token...");
        
        try {
            OAuth2AuthorizeRequest authorizeRequest = OAuth2AuthorizeRequest
                    .withClientRegistrationId("auth-server")
                    .principal("accounts-service")
                    .build();

            log.info("üîê [OAuth2TokenService] –°–æ–∑–¥–∞–Ω authorize request –¥–ª—è client: auth-server");

            OAuth2AuthorizedClient authorizedClient = authorizedClientManager.authorize(authorizeRequest);

            if (authorizedClient == null || authorizedClient.getAccessToken() == null) {
                log.error("‚ùå [OAuth2TokenService] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞");
                return null;
            }

            String accessToken = authorizedClient.getAccessToken().getTokenValue();
            log.info("‚úÖ [OAuth2TokenService] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ: {}", 
                    accessToken.substring(0, Math.min(20, accessToken.length())) + "...");
            
            log.info("üîê [OAuth2TokenService] –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {}", 
                    authorizedClient.getAccessToken().getExpiresAt());

            return accessToken;

        } catch (Exception e) {
            log.error("‚ùå [OAuth2TokenService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage(), e);
            return null;
        }
    }

    public boolean validateToken(String token) {
        if (token == null || token.isEmpty()) {
            log.warn("‚ö†Ô∏è [OAuth2TokenService] –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ null");
            return false;
        }
        
        log.info("üîç [OAuth2TokenService] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {}", 
                token.substring(0, Math.min(20, token.length())) + "...");
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
        return true;
    }
} 