package com.kitchentech.exchangegenerator.service;

import com.kitchentech.exchangegenerator.dto.ExchangeRateDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.oauth2.client.OAuth2AuthorizeRequest;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class RequestService {
    private final RestTemplate restTemplate;
    private final GeneratorService generatorService;
    private final OAuth2AuthorizedClientManager authorizedClientManager;

    @Value("${gateway.url}")
    private String gatewayUrl;

    @Value("${auth.server.url}")
    private String authServerUrl;
    @Value("${auth.client.id}")
    private String clientId;
    @Value("${auth.client.secret}")
    private String clientSecret;

    @Scheduled(fixedRate = 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void generateAndSendExchangeRates() {
        log.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...");

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –≤–∞–ª—é—Ç
            List<ExchangeRateDto> rates = generatorService.generateExchangeRates();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ exchange —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ gateway
            sendRatesToExchangeService(rates);

            log.info("‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {}", e.getMessage(), e);
        }
    }

    private void sendRatesToExchangeService(List<ExchangeRateDto> rates) {
        try {
            OAuth2AuthorizeRequest authorizeRequest = OAuth2AuthorizeRequest
                    .withClientRegistrationId("auth-server")
                    .principal("exchange-generator-service") // –ª—é–±–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    .build();

            OAuth2AuthorizedClient authorizedClient = authorizedClientManager.authorize(authorizeRequest);

            if (authorizedClient == null || authorizedClient.getAccessToken() == null) {
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞");
                return;
            }

            String accessToken = authorizedClient.getAccessToken().getTokenValue();
            log.info("[OAUTH2] –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω —É auth-server: {}... (expires: {})", accessToken.substring(0, Math.min(20, accessToken.length())), authorizedClient.getAccessToken().getExpiresAt());

            String url = gatewayUrl + "/api/exchange/rates";
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(accessToken); // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫

            log.info("[OAUTH2] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –≤ gateway: {}...", accessToken.substring(0, Math.min(20, accessToken.length())));

            HttpEntity<List<ExchangeRateDto>> entity = new HttpEntity<>(rates, headers);
            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    entity,
                    String.class
            );
            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("üì§ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ exchange —Å–µ—Ä–≤–∏—Å");
            } else {
                log.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç exchange —Å–µ—Ä–≤–∏—Å–∞: {}", response.getStatusCode());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É—Ä—Å–æ–≤ –≤ exchange —Å–µ—Ä–≤–∏—Å: {}", e.getMessage(), e);
        }
    }
}
