package com.kitchentech.frontui;

import com.kitchentech.frontui.dto.UserRegistrationDto;
import com.kitchentech.frontui.dto.UserRegistrationResponseDto;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import com.kitchentech.frontui.dto.UserDetailsDto;

@Slf4j
@RequestMapping("/")
@Controller
public class IndexController {

    @Autowired
    private RestTemplate restTemplate;

    @Value("${gateway.url}")
    private String gatewayUrl;

    @GetMapping
    public String index() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ dashboard –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return "redirect:/dashboard";
    }

    @GetMapping("login")
    public String login() {
        return "login";
    }
    
    @GetMapping("register")
    public String register() {
        return "register";
    }
    
    @PostMapping("register")
    public String registerUser(@RequestParam String username,
                              @RequestParam String password,
                              @RequestParam String confirmPassword,
                              @RequestParam String email,
                              @RequestParam String firstName,
                              @RequestParam String lastName,
                              @RequestParam String birthDate,
                              Model model) {
        
        log.info("üîÑ –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
        
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!password.equals(confirmPassword)) {
            log.warn("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
            model.addAttribute("error", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
            return "register";
        }
        
        if (password.length() < 6) {
            log.warn("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
            model.addAttribute("error", "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
            return "register";
        }
        
        try {
            // –°–æ–∑–¥–∞–µ–º DTO –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            UserRegistrationDto registrationDto = new UserRegistrationDto();
            registrationDto.setUsername(username);
            registrationDto.setPassword(password);
            registrationDto.setEmail(email);
            registrationDto.setFirstName(firstName);
            registrationDto.setLastName(lastName);
            registrationDto.setBirthDate(java.time.LocalDate.parse(birthDate));
            
            log.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: username={}, email={}, birthDate={}", username, email, birthDate);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            HttpEntity<UserRegistrationDto> entity = new HttpEntity<>(registrationDto, headers);
            
            // –í—ã–∑—ã–≤–∞–µ–º API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            String url = gatewayUrl + "/api/public/register";
            log.info("üåê URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", url);
            
            ResponseEntity<UserRegistrationResponseDto> response = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    entity,
                    UserRegistrationResponseDto.class
            );
            
            log.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å={}, —Ç–µ–ª–æ={}", response.getStatusCode(), response.getBody());
            
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {}", username);
                return "redirect:/register-success";
            } else {
                log.warn("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", response.getStatusCode());
                model.addAttribute("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
                return "register";
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", username, e.getMessage(), e);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            String errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
            if (e.getMessage().contains("Username already exists")) {
                errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
            } else if (e.getMessage().contains("Email already exists")) {
                errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
            }
            
            model.addAttribute("error", errorMessage);
            return "register";
        }
    }
    
    @GetMapping("register-success")
    public String registerSuccess() {
        return "register-success";
    }
    
    @GetMapping("dashboard")
    public String dashboard(HttpServletRequest request, Model model) {
        String username = "–ì–æ—Å—Ç—å";
        try {
            // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º JSESSIONID –∏–∑ –∫—É–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å –∫ /me
            HttpHeaders headers = new HttpHeaders();
            if (request.getCookies() != null) {
                for (var cookie : request.getCookies()) {
                    if ("JSESSIONID".equals(cookie.getName())) {
                        headers.add("Cookie", "JSESSIONID=" + cookie.getValue());
                    }
                }
            }
            HttpEntity<?> entity = new HttpEntity<>(headers);

            // –ó–∞–ø—Ä–æ—Å –∫ accounts —á–µ—Ä–µ–∑ gateway
            String url = gatewayUrl + "/api/users/me";
            ResponseEntity<UserDetailsDto> response = restTemplate.exchange(
                    url,
                    HttpMethod.GET,
                    entity,
                    UserDetailsDto.class
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                UserDetailsDto userDetails = response.getBody();
                username = userDetails.getUsername();
                model.addAttribute("userDetails", userDetails);
                log.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ /me: {}", username);
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /me: {}", e.getMessage());
        }

        model.addAttribute("username", username);
        return "dashboard";
    }
    
    @GetMapping("logout")
    public String logoutPage() {
        return "logout";
    }
    
    @PostMapping("logout")
    public String logout(HttpServletRequest request, HttpServletResponse response) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        
        if (authentication != null) {
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            new SecurityContextLogoutHandler().logout(request, response, authentication);
        }
        
        return "redirect:/logout";
    }
}
