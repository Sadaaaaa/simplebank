package com.kitchentech.gateway.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpCookie;
import org.springframework.http.HttpHeaders;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

@Slf4j
@Component
public class SessionValidationFilter implements WebFilter {
    @Value("${accounts.url:http://localhost:8082}")
    private String accountsUrl;

    private final WebClient webClient = WebClient.create();

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();
        String path = request.getPath().value();
        String authHeader = request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
        
        log.info("üîç Gateway SessionValidationFilter: {} {}", request.getMethod(), path);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å JWT
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            log.info("‚úÖ JWT –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return chain.filter(exchange);
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        if (path.startsWith("/api/public/") || path.startsWith("/actuator/") || path.startsWith("/api/login") || 
            path.equals("/logout") || path.equals("/login") || path.equals("/register") || 
            path.equals("/register-success") || path.equals("/dashboard") || path.equals("/") || 
            path.equals("/index") || path.equals("/test")) {
            return chain.filter(exchange);
        }
        
        log.info("üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º JSESSIONID –¥–ª—è: {}", path);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JSESSIONID –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        HttpCookie jsession = request.getCookies().getFirst("JSESSIONID");
        if (jsession == null) {
            log.warn("‚ùå –ù–µ—Ç JSESSIONID, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: {}", request.getPath());
            exchange.getResponse().setStatusCode(org.springframework.http.HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }
        
        log.info("üç™ –ù–∞–π–¥–µ–Ω JSESSIONID: {}", jsession.getValue());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ accounts
        String validateUrl = accountsUrl + "/public/session/validate";
        return webClient.get()
                .uri(validateUrl)
                .cookie("JSESSIONID", jsession.getValue())
                .exchangeToMono(response -> {
                    if (response.statusCode().is2xxSuccessful()) {
                        log.info("‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ –≤ gateway, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ —Ç–æ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞
                        ServerHttpRequest mutatedRequest = request.mutate()
                                .header("X-Gateway-Session-Valid", "true")
                                .header("X-Gateway-Session-Id", jsession.getValue())
                                .build();
                        ServerWebExchange mutatedExchange = exchange.mutate()
                                .request(mutatedRequest)
                                .build();
                        return chain.filter(mutatedExchange);
                    } else {
                        log.warn("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è {}: {}", request.getPath(), response.statusCode());
                        exchange.getResponse().setStatusCode(org.springframework.http.HttpStatus.UNAUTHORIZED);
                        return exchange.getResponse().setComplete();
                    }
                });
    }
} 