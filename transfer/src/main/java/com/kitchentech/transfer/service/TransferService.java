package com.kitchentech.transfer.service;

import com.kitchentech.transfer.dto.AccountInfoDto;
import com.kitchentech.transfer.dto.TransferRequestDto;
import com.kitchentech.transfer.dto.TransferResponseDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
public class TransferService {

    private final RestTemplate restTemplate;

    @Value("${gateway.url}")
    private String gatewayUrl;

    public TransferResponseDto performInternalTransfer(TransferRequestDto request) {
        log.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", request);
        
        TransferResponseDto response = new TransferResponseDto();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            AccountInfoDto fromAccount = getAccountInfo(request.getFromAccountId());
            if (fromAccount == null) {
                response.setSuccess(false);
                response.setMessage("–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return response;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            AccountInfoDto toAccount = getAccountInfo(request.getToAccountId());
            if (toAccount == null) {
                response.setSuccess(false);
                response.setMessage("–°—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return response;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (!fromAccount.getUserId().equals(toAccount.getUserId())) {
                response.setSuccess(false);
                response.setMessage("–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥");
                return response;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            if (fromAccount.getBalance().compareTo(request.getAmount()) < 0) {
                response.setSuccess(false);
                response.setMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è");
                return response;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ cash —Å–µ—Ä–≤–∏—Å
            boolean success = performCashOperations(fromAccount.getId(), toAccount.getId(), request.getAmount());
            
            if (success) {
                response.setSuccess(true);
                response.setMessage("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                response.setTransferId(UUID.randomUUID().toString());
                response.setFromAccountId(fromAccount.getId());
                response.setToAccountId(toAccount.getId());
                response.setAmount(request.getAmount());
                response.setTransferDate(LocalDateTime.now());
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
                AccountInfoDto updatedFromAccount = getAccountInfo(fromAccount.getId());
                AccountInfoDto updatedToAccount = getAccountInfo(toAccount.getId());
                response.setFromAccountNewBalance(updatedFromAccount.getBalance());
                response.setToAccountNewBalance(updatedToAccount.getBalance());
                
                log.info("‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {}", response.getTransferId());
            } else {
                response.setSuccess(false);
                response.setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞");
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", e.getMessage(), e);
            response.setSuccess(false);
            response.setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: " + e.getMessage());
        }
        
        return response;
    }

    public TransferResponseDto performExternalTransfer(TransferRequestDto request) {
        log.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", request);
        
        TransferResponseDto response = new TransferResponseDto();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            AccountInfoDto fromAccount = getAccountInfo(request.getFromAccountId());
            if (fromAccount == null) {
                response.setSuccess(false);
                response.setMessage("–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return response;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            AccountInfoDto toAccount = getAccountInfo(request.getToAccountId());
            if (toAccount == null) {
                response.setSuccess(false);
                response.setMessage("–°—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return response;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if (fromAccount.getUserId().equals(toAccount.getUserId())) {
                response.setSuccess(false);
                response.setMessage("–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥");
                return response;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            if (fromAccount.getBalance().compareTo(request.getAmount()) < 0) {
                response.setSuccess(false);
                response.setMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è");
                return response;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ cash —Å–µ—Ä–≤–∏—Å
            boolean success = performCashOperations(fromAccount.getId(), toAccount.getId(), request.getAmount());
            
            if (success) {
                response.setSuccess(true);
                response.setMessage("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                response.setTransferId(UUID.randomUUID().toString());
                response.setFromAccountId(fromAccount.getId());
                response.setToAccountId(toAccount.getId());
                response.setAmount(request.getAmount());
                response.setTransferDate(LocalDateTime.now());
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
                AccountInfoDto updatedFromAccount = getAccountInfo(fromAccount.getId());
                AccountInfoDto updatedToAccount = getAccountInfo(toAccount.getId());
                response.setFromAccountNewBalance(updatedFromAccount.getBalance());
                response.setToAccountNewBalance(updatedToAccount.getBalance());
                
                log.info("‚úÖ –í–Ω–µ—à–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {}", response.getTransferId());
            } else {
                response.setSuccess(false);
                response.setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞");
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", e.getMessage(), e);
            response.setSuccess(false);
            response.setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: " + e.getMessage());
        }
        
        return response;
    }

    public List<AccountInfoDto> getUserAccounts(String username) {
        log.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
        
        try {
            String url = gatewayUrl + "/api/cash/accounts/" + username;
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<?> entity = new HttpEntity<>(headers);

            ResponseEntity<Object[]> response = restTemplate.exchange(
                    url,
                    HttpMethod.GET,
                    entity,
                    Object[].class
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                List<AccountInfoDto> accounts = java.util.Arrays.stream(response.getBody())
                        .map(item -> {
                            Map<String, Object> map = (Map<String, Object>) item;
                            AccountInfoDto dto = new AccountInfoDto();
                            dto.setId(Long.valueOf(map.get("id").toString()));
                            dto.setUserId(Long.valueOf(map.get("userId").toString()));
                            dto.setUsername((String) map.get("username"));
                            dto.setCurrency((String) map.get("currency"));
                            dto.setName((String) map.get("name"));
                            dto.setBalance(new BigDecimal(map.get("balance").toString()));
                            dto.setActive((Boolean) map.get("active"));
                            return dto;
                        })
                        .toList();
                
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Å—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", accounts.size(), username);
                return accounts;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
        }
        
        return List.of();
    }

    private AccountInfoDto getAccountInfo(Long accountId) {
        try {
            String url = gatewayUrl + "/api/cash/accounts/id/" + accountId;
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<?> entity = new HttpEntity<>(headers);

            ResponseEntity<Map> response = restTemplate.exchange(
                    url,
                    HttpMethod.GET,
                    entity,
                    Map.class
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                Map<String, Object> map = response.getBody();
                AccountInfoDto dto = new AccountInfoDto();
                dto.setId(Long.valueOf(map.get("id").toString()));
                dto.setUserId(Long.valueOf(map.get("userId").toString()));
                dto.setUsername((String) map.get("username"));
                dto.setCurrency((String) map.get("currency"));
                dto.setName((String) map.get("name"));
                dto.setBalance(new BigDecimal(map.get("balance").toString()));
                dto.setActive((Boolean) map.get("active"));
                return dto;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ {}: {}", accountId, e.getMessage(), e);
        }
        
        return null;
    }

    private boolean performCashOperations(Long fromAccountId, Long toAccountId, BigDecimal amount) {
        try {
            // –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —Å—á–µ—Ç–∞
            Map<String, Object> withdrawData = Map.of(
                    "accountId", fromAccountId,
                    "amount", amount,
                    "operationType", "WITHDRAW"
            );

            String withdrawUrl = gatewayUrl + "/api/cash/operation";
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> withdrawEntity = new HttpEntity<>(withdrawData, headers);

            ResponseEntity<Map> withdrawResponse = restTemplate.exchange(
                    withdrawUrl,
                    HttpMethod.POST,
                    withdrawEntity,
                    Map.class
            );

            if (!withdrawResponse.getStatusCode().is2xxSuccessful() || 
                !(Boolean) withdrawResponse.getBody().get("success")) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –¥–µ–Ω–µ–≥ —Å —Å—á–µ—Ç–∞ {}", fromAccountId);
                return false;
            }

            // –ö–ª–∞–¥–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—á–µ—Ç
            Map<String, Object> depositData = Map.of(
                    "accountId", toAccountId,
                    "amount", amount,
                    "operationType", "DEPOSIT"
            );

            HttpEntity<Map<String, Object>> depositEntity = new HttpEntity<>(depositData, headers);

            ResponseEntity<Map> depositResponse = restTemplate.exchange(
                    withdrawUrl,
                    HttpMethod.POST,
                    depositEntity,
                    Map.class
            );

            if (!depositResponse.getStatusCode().is2xxSuccessful() || 
                !(Boolean) depositResponse.getBody().get("success")) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç {}", toAccountId);
                // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω—è—Ç–∏—è
                return false;
            }

            log.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–Ω—è—Ç–∏—è –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            return true;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ–Ω—å–≥–∞–º–∏: {}", e.getMessage(), e);
            return false;
        }
    }
} 